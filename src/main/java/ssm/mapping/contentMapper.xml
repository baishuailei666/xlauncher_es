<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="ssm.dao.EventContentDao">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.entity.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->

    <!--根据id查询得到一个对象-->
    <select id="getEventContent" parameterType="int" resultType="ssm.entity.EventContent">
        select * from es_event_content where content_id=#{content_id}
    </select>

    <!-- 创建(Create) -->
    <insert id="addEventContent" parameterType="ssm.entity.EventContent">
        insert into es_event_content(content_id,content_description,type_id) values(#{content_id},#{content_description},#{type_id})
    </insert>

    <!-- 删除(Remove) -->
    <delete id="deleteEventContent" parameterType="int">
        delete from es_event_content where content_id=#{content_id}
    </delete>

    <!-- 修改(Update) -->
    <update id="updateEventContent" parameterType="ssm.entity.EventContent">
        update es_event_content set content_description=#{content_description},type_id=#{type_id} where content_id=#{content_id}
    </update>

    <!-- 查询全部 -->
    <select id="getAllEventsContent" resultType="ssm.entity.EventContent">
        select * from es_event_content
    </select>
</mapper>