<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="ssm.dao.UserDataDao">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.entity.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->

    <!--根据id查询得到一个user对象-->
    <select id="getUserData" parameterType="int" resultType="ssm.entity.UserData">
        SELECT
        es_user_subscription.user_id,
        es_user_subscription.user_name,
        es_event_type.type_description,
        es_event_content.content_description,
        es_user_subscription.subscription_time
        FROM
        es_event_type ,
        es_user_subscription ,
        es_event_content
        WHERE
        es_user_subscription.content_id=es_event_content.content_id AND
        es_event_type.type_id=es_event_content.type_id
        <choose>
        <when test="user_name != null and user_name != ''">
        AND es_user_subscription.user_name=#{user_name}
        </when>
        <when test="content_id != null and content_id != ''">
        AND es_user_subscription.content_id=#{content_id}
        </when>
        <when test="subscription_time != null and subscription_time != ''">
        AND es_user_subscription.subscription_time=#{subscription_time}
        </when>
        <otherwise>
        AND es_user_subscription.user_name=#{user_name}
        </otherwise>
        </choose>
    </select>

    <!-- 创建用户(Create) -->
    <insert id="add" parameterType="ssm.entity.UserData">
        insert into es_user_subscription(user_id,user_name,content_id,subscription_time) values(#{user_id},#{user_name},#{content_id},#{subscription_time})
    </insert>

    <!-- 删除用户(Remove) -->
    <delete id="delete" parameterType="int">
        delete from es_user_subscription where user_id=#{user_id}
    </delete>

    <!-- 修改用户(Update) -->
    <update id="update" parameterType="ssm.entity.UserData">
        update es_user_subscription set content_id=#{content_id} where user_id=#{user_id}
    </update>

    <!-- 查询全部用户 -->
    <select id="getAllUsersData" resultType="ssm.entity.UserData">
        SELECT
        es_user_subscription.user_id,
        es_user_subscription.user_name,
        es_event_type.type_description,
        es_event_content.content_description,
        es_user_subscription.subscription_time
        FROM
        es_event_type ,
        es_user_subscription ,
        es_event_content
        WHERE
        es_user_subscription.content_id=es_event_content.content_id AND
        es_event_type.type_id=es_event_content.type_id
    </select>

</mapper>