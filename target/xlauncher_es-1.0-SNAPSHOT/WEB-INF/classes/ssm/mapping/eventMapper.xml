<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="ssm.dao.EventDataDao">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.entity.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->

    <!-- 根据输入参数 查询所有事件信息-->
    <select id="getEventFromParam" parameterType="int" resultType="ssm.entity.EventData">
        SELECT
        es_alert_event.event_id,
        es_alert_event.event_starttime,
        es_event_content.content_description,
        es_event_type.type_description,
        es_alert_event.event_location,
        es_alert_event.event_cam_id,
        es_alert_event.event_source,
        es_alert_event.event_status,
        es_alert_event.event_push_status,
        es_alert_event.event_endtime
        FROM
        es_alert_event ,
        es_event_content ,
        es_event_type
        WHERE es_alert_event.type_id=es_event_type.type_id
        AND es_alert_event.content_id=es_event_content.content_id
        <choose>
        <when test="event_starttime != null and event_starttime != ''">
        AND event_starttime=#{event_starttime}
        </when>
        <when test="event_location != null and event_location != ''">
        AND event_location=#{event_location}
        </when>
        <when test="type_id != null and type_id != ''">
        AND type_id=#{type_id}
        </when>
        <when test="content_id != null and content_id != ''">
        AND content_id=#{content_id}
        </when>
        <when test="event_status != null and event_status != ''">
        AND event_status=#{event_status}
        </when>
        <when test="event_push_status != null and event_push_status != ''">
        AND event_push_status=#{event_push_status}
        </when>
        <when test="event_endtime != null and event_endtime != ''">
        AND event_endtime=#{event_endtime}
        </when>
        <otherwise>
        AND event_id=#{event_id}
        </otherwise>
        </choose>
    </select>


    <!-- 查询所有事件信息-->
    <select id="getOneData" parameterType="int" resultType="ssm.entity.EventData">
        SELECT
        es_alert_event.event_id,
        es_alert_event.event_starttime,
        es_event_content.content_description,
        es_event_type.type_description,
        es_alert_event.event_location,
        es_alert_event.event_cam_id,
        es_alert_event.event_source,
        es_alert_event.event_status,
        es_alert_event.event_push_status,
        es_alert_event.event_endtime
        FROM
        es_alert_event ,
        es_event_content ,
        es_event_type
        WHERE es_alert_event.type_id=es_event_type.type_id
        AND es_alert_event.content_id=es_event_content.content_id
        AND es_alert_event.event_id=#{event_id}
    </select>


    <select id="getAllEvents" parameterType="int" resultType="ssm.entity.EventData">
        SELECT
        es_alert_event.event_id,
        es_alert_event.event_starttime,
        es_event_content.content_description,
        es_event_type.type_description,
        es_alert_event.event_location,
        es_alert_event.event_cam_id,
        es_alert_event.event_source,
        es_alert_event.event_status,
        es_alert_event.event_push_status,
        es_alert_event.event_endtime
        FROM
        es_alert_event ,
        es_event_content ,
        es_event_type
        WHERE es_alert_event.type_id=es_event_type.type_id
        AND es_alert_event.content_id=es_event_content.content_id

    </select>


    <!--根据id查询得到一个对象-->
    <select id="getOne" parameterType="int" resultType="ssm.entity.AlertEvent">
        SELECT * FROM es_alert_event WHERE event_id=#{event_id}
    </select>


    <!-- 创建(Create) -->
    <insert id="add" parameterType="ssm.entity.AlertEvent">
        insert into es_alert_event(event_id,
        event_starttime,
        event_location,
        event_cam_id,
        type_id,
        content_id,
        event_source,
        event_status,
        event_push_status,
        event_endtime)
        values(#{event_id},
        #{event_starttime},
        #{event_location},
        #{event_cam_id},
        #{type_id},
        #{content_id},
        #{event_source},
        #{event_status},
        #{event_push_status},
        #{event_endtime})
    </insert>


    <!-- 删除(Remove) -->
    <delete id="delete" parameterType="int">

    </delete>


    <!-- 修改(Update) -->
    <update id="update" parameterType="ssm.entity.AlertEvent">
      UPDATE es_alert_event SET event_status=#{event_status} , event_push_status=#{event_push_status} , event_endtime=#{event_endtime}
      WHERE event_id=#{event_id}
    </update>


    <!-- 查询全部 -->
    <select id="getAll" resultType="ssm.entity.AlertEvent">
      SELECT * FROM es_alert_event
    </select>
</mapper>