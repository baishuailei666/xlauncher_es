<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="me.gacl.mapping.userMapper"就是me.gacl.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="ssm.dao.UserSubscriptionDao">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.entity.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类-->

    <!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。
    parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型-->
    <!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys
            方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 -->
    <!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 -->
    <!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  -->


    <!--根据id查询得到一个user对象-->
    <select id="getUserSubById" parameterType="int" resultType="ssm.entity.UserSubscription">
        SELECT
        es_user_subscription.user_id,
        es_user_subscription.user_name,
        es_event_type.type_description,
        es_event_content.content_description,
        es_user_subscription.subscription_time
        FROM
        es_event_type ,
        es_user_subscription ,
        es_event_content
        WHERE
        es_user_subscription.content_id=es_event_content.content_id
        AND es_event_type.type_id=es_event_content.type_id
        AND es_user_subscription.user_id=#{user_id}

    </select>

    <!-- 创建用户(Create) -->
    <insert id="addUserSub" parameterType="ssm.entity.UserSubscription">
        insert into es_user_subscription(user_name,content_id,subscription_time) values(#{user_name},#{content_id},#{subscription_time})
    </insert>

    <!-- 删除用户(Remove) -->
    <delete id="deleteUserSub" parameterType="int">
        delete from es_user_subscription where user_id=#{user_id}
    </delete>

    <!-- 修改用户(Update) -->
    <update id="updateUserSub" parameterType="ssm.entity.UserSubscription">
        update es_user_subscription
        set
        <if test="user_name != null and user_name != ''">
        user_name=#{user_name},
        </if>
        <if test="content_id != null and content_id != ''">
        content_id=#{content_id}
        </if>
        <if test="subscription_time != null and subscription_time != ''">
            subscription_time=#{subscription_time}
        </if>
        where user_id=#{user_id}
    </update>

    <!-- 查询全部用户 -->
    <select id="getAllUsersSub" resultType="ssm.entity.UserData">
        SELECT
        es_user_subscription.user_id,
        es_user_subscription.user_name,
        es_event_type.type_description,
        es_event_content.content_description,
        es_user_subscription.subscription_time
        FROM
        es_event_type ,
        es_user_subscription ,
        es_event_content
        WHERE
        es_user_subscription.content_id=es_event_content.content_id
        AND es_event_type.type_id=es_event_content.type_id

    </select>
</mapper>